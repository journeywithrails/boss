{\rtf1\ansi\ansicpg1252\cocoartf949\cocoasubrtf270
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww19220\viewh17120\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural

\f0\fs48 \cf0 Notes about refactoring for bookkeeper access.\
\
\
1. Monolithic User entity is a bad code smell. In a system with multiple user roles, User object should only be used for authentication/access control. Otherwise you get tons of conditional logic that is better handled with OO decomposition.\
\
2. Roles we want are not mutually exclusive\
\
3. Number of roles we need is quite small. Refactoring may not be worthwhile if the list of roles & their interactions is not going to grow.\
\
4. We have good test coverage. Refactoring is feasible and we don't have to settle for a kluge if we decide refactoring user would be better.\
\

\b Alternatives\
\
1. Use mixins, with monolithic users table.\

\i\b0 advantages
\i0\b \

\b0 - allows 1 user to have multiple roles\
- easy refactor from current state\
- simple created_by relationships\
\

\i disadvantages
\i0 \
- will still need conditional logic\
- users table becomes large/crufty\
\

\b 2. Single table inheritance.\

\i\b0 advantages
\i0 \
- easy refactor from current state\
- easy to understand conceptually\
- greatly reduces conditional logic\
\

\i disadvantages
\i0 \
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\ql\qnatural\pardirnatural
\cf0 - very difficult to model multiple roles (the rails automagic STI is not set up for this, and is based on the table having a single type column). \
\

\b 3. Model roles explicitly. 
\b0 Move current bookkeepee elements to Bookkeepee object and create Bookkeeper object. User owns a bookkeepee and/or a bookkeeper\

\i advantages
\i0 \
least amount of conditional logic\
easy to understand app from db model\
fits best with Role-based access control
\i \

\i0 actually easy as can refactor in stages: introduce bookkeeper and later introduce bookkeepee and move responsibilities from User to Bookkeepee\

\i\b \

\b0 \
disadvantages\

\i0 most difficult refactor (but we have tests!)\
more coding overhead to setup/maintain\
for current number of roles we need to manage, may be more work than it's worth\
makes created_by associations more difficult. When more than one role can own something, it must be related polymorphically (rails has magic) or else twice-removed through user (rails has some magic for helping us here too with :through associations)\
\
\

\b What 3 would look like:\

\b0 1. create Bookkeeper object\
2. create Bookkeepee object\
3. delegate existing bookkeepee func back to user\
4. in new code, use bookkeepee (prefer name biller -- bookkeepee & bookkeeper are too close. invoicer & invoice are too close)\
5. refactor old code to remove func from user gradually.\
\

\b Access Control
\b0 \
options\

\b Authorization Plugin\

\i\b0 advantages\

\i0 control at whatever level of granularity is necessary: a role in general, a role on a class, a role on a specific object\
excellent helpers for controllers & views
\i \
\
disadvantages\

\i0 a little heavy -- can result in a lot of db accesses. however, query caching mitigates the affect of this
\i \

\i0\b \
ACL}