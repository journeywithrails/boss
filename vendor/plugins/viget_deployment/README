= VigetDeployment

This is a repackaging of VLCapistrano and related gems into Rails plugin form.

To use this plugin, add the following line to your Capfile if it is not already present:

  Dir['vendor/plugins/*/recipes/*.rb'].each { |plugin| load(plugin) }

(This line will already be present if you capified your application using Capistrano 2.1.0 or later.)

This plugin requires that the following plugins be installed:

* capistrano
* capistrano-ext
* tinder

== Capistrano rsync_with_remote_cache

The remainder of this file documents the capistrano_rsync_with_remote_cache gem, which can be built using the included Rakefile and used independently of the viget_deployment plugin. This gem provides a deployment strategy for Capistrano which combines rsync with a remote cache, allowing fast deployments from Subversion repositories behind firewalls.

=== Requirements

This gem requires Capistrano 2.0.0 and higher. Git support requires Capistrano 2.1.0 or higher.

This gem has only been tested with Subversion and Git. It is unlikely to be supported for other SCM systems unless we adopt them at Viget Labs, or get outside help.

This gem requires and <tt>rsync</tt> command line utilities on the local and remote hosts. It also requires either <tt>svn</tt> or <tt>git</tt> on the local host, but not the remote host.

This gem is tested primarily on Mac OS X and Linux. It may work with a Windows local host, but is not tested or supported. Like Capistrano itself, it will not work with a Windows remote host.

=== Gem preliminaries

To create the gem, run <tt>rake package</tt> in this directory, which will dump the gem in the pkg subdirectory.

To use this deployment strategy, add this line to your configuration:

<tt>set :deploy_via, :rsync_with_remote_cache</tt>

=== How it works

This strategy maintains two cache directories:

* The local cache directory is a checkout from the SCM repository. The local cache directory is specified with the <tt>local_cache</tt> variable in the configuration. If not specified, it will default to ".rsync_cache" in the same directory as the Capfile.
* The remote cache directory is an rsync copy of the local cache directory. The remote cache directory is specified with the <tt>repository_cache</tt> variable in the configuration (this name comes from the remote_cache strategy that ships with Capistrano, and has been maintained for compatibility.) If not specified, it will default to "shared/cached-copy" (again, for compatibility with remote_cache.)

Deployment happens in three major steps. First, the local cache directory is processed. If it does not exist, it is created with a checkout of the revision to be deployed. If it exists, it is updated to the revision to be deployed.

Second, rsync runs on the local side to sync the remote cache to the local cache. When the rsync is complete, the remote cache should be an exact replica of the local cache.

Finally, a copy of the remote cache is made in the appropriate release directory. The end result is the same as if the code had been checked out directly on the remote server, as in the default strategy.

Copyright (c) 2007, 2008 Mark Cornick, released under the MIT license
